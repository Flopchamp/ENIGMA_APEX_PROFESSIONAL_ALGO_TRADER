#!/usr/bin/env python3
"""
üîç ENIGMA APEX PRODUCTION VALIDATOR
Complete system validation for client training and live trading
"""

import os
import sys
import json
import subprocess
import importlib
from pathlib import Path
from datetime import datetime

class ProductionValidator:
    def __init__(self):
        self.base_path = Path(__file__).parent
        self.validation_results = {}
        self.critical_errors = []
        self.warnings = []
        
    def print_header(self):
        """Display validation header"""
        print("üîç ENIGMA APEX PRODUCTION VALIDATOR")
        print("=" * 60)
        print("üìÖ Validation Date:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        print("üéØ Target: Client Training & Live Trading")
        print("=" * 60)
        print()
        
    def validate_file_structure(self):
        """Validate all required files exist"""
        print("üìÅ VALIDATING FILE STRUCTURE...")
        print("-" * 40)
        
        required_files = {
            # Core system files
            'ENIGMA_APEX_COMPLETE_SYSTEM.py': 'Main system launcher',
            'TRAINING_MODE_LAUNCHER.py': 'Training environment',
            'CLIENT_NOTIFICATION_DEMO.py': 'Client demonstration',
            'requirements.txt': 'Python dependencies',
            
            # System components
            'system/apex_compliance_guardian_streamlit.py': 'Streamlit web interface (MAIN DEPLOYMENT FILE)',
            'system/enhanced_websocket_server.py': 'WebSocket communication',
            'system/desktop_notifier.py': 'Notification system',
            'system/apex_compliance_guardian.py': 'Risk management',
            'system/advanced_risk_manager.py': 'Advanced risk controls',
            'system/ocr_enigma_reader.py': 'Signal detection',
            'system/production_config_manager.py': 'Production configuration',
            
            # NinjaScript components
            'ninjatrader/Indicators/EnigmaApexPowerScore.cs': 'Power score indicator',
            'ninjatrader/Strategies/EnigmaApexAutoTrader.cs': 'Automated trading',
            'ninjatrader/AddOns/EnigmaApexRiskManager.cs': 'Risk management addon',
            
            # Documentation
            'documentation/ENIGMA_APEX_USER_MANUAL.md': 'User manual',
            'documentation/ENIGMA_APEX_VISUAL_SETUP_GUIDE.md': 'Setup guide',
            'PRODUCTION_RELEASE_GUIDE.md': 'Production guide'
        }
        
        all_files_exist = True
        for file_path, description in required_files.items():
            full_path = self.base_path / file_path
            exists = full_path.exists()
            status = "‚úÖ" if exists else "‚ùå"
            print(f"   {status} {file_path}")
            print(f"      {description}")
            
            if not exists:
                all_files_exist = False
                self.critical_errors.append(f"Missing file: {file_path}")
            
        self.validation_results['file_structure'] = all_files_exist
        print(f"\nüìÅ File Structure: {'‚úÖ VALID' if all_files_exist else '‚ùå INVALID'}")
        print()
        
    def validate_python_dependencies(self):
        """Validate Python dependencies"""
        print("üêç VALIDATING PYTHON DEPENDENCIES...")
        print("-" * 40)
        
        required_packages = [
            'streamlit', 'pandas', 'numpy', 'plotly', 'websockets',
            'asyncio', 'plyer', 'opencv-python', 'Pillow',
            'requests', 'flask'
        ]
        
        missing_packages = []
        for package in required_packages:
            try:
                if package == 'opencv-python':
                    import cv2
                else:
                    importlib.import_module(package)
                print(f"   ‚úÖ {package}")
            except ImportError:
                print(f"   ‚ùå {package} - NOT INSTALLED")
                missing_packages.append(package)
        
        dependencies_valid = len(missing_packages) == 0
        self.validation_results['dependencies'] = dependencies_valid
        
        if missing_packages:
            self.critical_errors.append(f"Missing packages: {', '.join(missing_packages)}")
            print(f"\nüí° Install missing packages: pip install {' '.join(missing_packages)}")
        
        print(f"\nüêç Dependencies: {'‚úÖ VALID' if dependencies_valid else '‚ùå INVALID'}")
        print()
        
    def validate_notification_system(self):
        """Validate notification system"""
        print("üîî VALIDATING NOTIFICATION SYSTEM...")
        print("-" * 40)
        
        try:
            # Import and test notification system
            sys.path.append(str(self.base_path / 'system'))
            from desktop_notifier import DesktopNotifier
            
            notifier = DesktopNotifier()
            stats = notifier.get_notification_stats()
            
            print("   ‚úÖ DesktopNotifier class imported")
            print("   ‚úÖ Notification settings loaded")
            print(f"   ‚úÖ Plyer available: {stats.get('plyer_available', False)}")
            print(f"   ‚úÖ Windows sound available: {stats.get('windows_sound_available', False)}")
            
            self.validation_results['notifications'] = True
            print("\nüîî Notifications: ‚úÖ VALID")
            
        except Exception as e:
            print(f"   ‚ùå Notification system error: {e}")
            self.critical_errors.append(f"Notification system failure: {e}")
            self.validation_results['notifications'] = False
            print("\nüîî Notifications: ‚ùå INVALID")
        
        print()
        
    def run_full_validation(self):
        """Run complete system validation"""
        self.print_header()
        
        # Run all validations
        self.validate_file_structure()
        self.validate_python_dependencies()
        self.validate_notification_system()
        
        # Generate final report
        critical_issues = len(self.critical_errors)
        
        print("üìä VALIDATION REPORT")
        print("=" * 60)
        
        if critical_issues == 0:
            status = "üü¢ PRODUCTION READY"
            recommendation = "‚úÖ APPROVED FOR CLIENT TRAINING AND LIVE TRADING"
            print(f"üéØ OVERALL STATUS: {status}")
            print(f"üìã RECOMMENDATION: {recommendation}")
            print()
            print("üöÄ DEPLOYMENT INFORMATION:")
            print("   üì± Main file for deployment: system/apex_compliance_guardian_streamlit.py")
            print("   üéØ Training launcher: python TRAINING_MODE_LAUNCHER.py")
            print("   üîî Notification demo: python CLIENT_NOTIFICATION_DEMO.py")
            print("   üìä System demo: python ENIGMA_APEX_COMPLETE_SYSTEM.py")
            return True
        else:
            status = "üî¥ NOT READY"
            recommendation = "‚ùå RESOLVE CRITICAL ISSUES BEFORE DEPLOYMENT"
            print(f"üéØ OVERALL STATUS: {status}")
            print(f"üìã RECOMMENDATION: {recommendation}")
            print()
            print("üö® CRITICAL ISSUES TO RESOLVE:")
            for error in self.critical_errors:
                print(f"   ‚ùå {error}")
            return False

def main():
    """Main validation function"""
    try:
        validator = ProductionValidator()
        is_production_ready = validator.run_full_validation()
        
        if is_production_ready:
            print("\nüéâ SYSTEM READY FOR CLIENT DEPLOYMENT!")
            return 0
        else:
            print("\n‚ö†Ô∏è SYSTEM NEEDS ATTENTION BEFORE DEPLOYMENT")
            return 1
            
    except Exception as e:
        print(f"‚ùå Validation error: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
